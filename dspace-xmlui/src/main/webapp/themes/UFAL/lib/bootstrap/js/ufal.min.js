/*global jQuery */
/*jshint globalstrict: true*/
'use strict';

jQuery.fn.exists = function () {
    return this.length !== 0;
}

var ufal = ufal || {};
var console = window.console || {
        log: function () {
        }
    };

jQuery(document)
    .ready(    		        		
    function () {
    	
    	
        ufal.click_event = ufal.click_event || jQuery.fn.tap ? "tap" : "click";    	    	    	
    	
        jQuery.i18n.load("cs", {
            "Funding code:": "Kód projektu:",
            "Project name:": "Jméno projektu:",
            "used by %s submission(s)": "použito v %s záznamech",
            "ISO:": "Kód",
            "Language:": "Jazyk",
            "used by #%s": "použito %s&times;",
            "Please refer to the submission above for the latest available data. If you nevertheless need the original data, please click ":
              "Nejnovější dostupná data najdete v odkazovaném záznamu. Potřebujete-li data původní, klikněte prosím ",
            "here": "sem",
            "This site uses cookies to offer you a better browsing experience. By continuing to use our site, you consent to our use of cookies.":
            	"Tento web používá cookies, aby vám zpříjemnil prohlížení webu. Budete-li dále používat naši stránku, souhlasíte s naším využíváním cookies.",
            "I Understand": "Rozumím",
            "More Information": "Více informací"
            
        });
        
        
    	// inform users that cookies are not being used to gather information unnecessarily.
    	if(!ufal.utils.isCookieEqual("cookie-message", "hide")) {
    		var footer = jQuery("<div id='cookie-div' style='z-index: 100; position: fixed; bottom: 0; width: 100%; background-color: #C0C0C0; opacity: 0.9; border-top: 1px solid #C0C0C0; display: none;'>" +
    					"<div class='container' style='padding: 10px; font-weight: bold; color: #333333;'>" +
    						"<div class='col-md-6 col-md-offset-1' style='padding: 2px; font-size: 110%;'>" +    						
    						$.i18n._("This site uses cookies to offer you a better browsing experience. By continuing to use our site, you consent to our use of cookies.") +
    						"</div>" +
    						"<div class='col-md-4'>" +
    							"<a id='hide-cookie-div' class='btn btn-default' href='#' style='margin-right: 10px; color: #333333;'><strong>" +
    							$.i18n._("I Understand") +
    							"</strong></a>" +
    							"<a class='btn btn-default' style='color: #333333;' href='" + ufal.utils.get_dspace_url() +"page/cookies'><strong>" +
    							$.i18n._("More Information") +
    							"</strong></a>" +
    						"</div>" +
    					"</div>" +
    				"</div>");
    		jQuery("body").append(footer);
    		jQuery("#cookie-div").slideDown({
    			start: function() {
    				jQuery("#cookie-div").show();
    			}
    		});
    		jQuery("#hide-cookie-div").on(ufal.click_event, function() {
			var date = new Date();
			date.setYear(date.getFullYear() + 1);
    			document.cookie = "cookie-message=hide;expires=" + date.toUTCString() + ";path=" + new URL(ufal.utils.get_dspace_url()).pathname;
    			jQuery("#cookie-div").hide();
    		});
    	}
        
        jQuery("#aspect_eperson_LoginChooser_list_login-options .signon").click();    	

        var downloadLink = ufal.utils.getQueryParameter("download");
        if (downloadLink != null) {
            window.location = decodeURIComponent(downloadLink);
        }

        ufal.utils.handle_side_menu();
        ufal.utils.initialize_layer_slider();
        ufal.utils.handle_broken_images();
        ufal.utils.handle_static_pages_js();
        ufal.utils.basic_functions();
        ufal.utils.handle_modals();
        ufal.utils.convert_codes();

        ufal.submissions.handle_submission_js();
        ufal.submissions.autocomplete();

        ufal.search.handle_filters();

        ufal.browse.handle_date_input();

        ufal.submissions.handle_files();

        jQuery("[data-toggle='tooltip']").tooltip();

        // I agree button in license agreement should be large
        jQuery(
            "#cz_cuni_mff_ufal_UFALLicenceAgreement_field_confirm_license")
            .addClass("btn btn-large btn-block");

        jQuery('.linkify').each(function (index) {
            ufal.utils.linkify(this);
        });

        jQuery("#cz_cuni_mff_ufal_dspace_app_xmlui_aspect_statistics_GAStatisticsTransformer_field_start_date")
            .datepicker({
                autoclose: true,
                format: 'yyyy-mm-dd',
                forceParse: false
            });

        jQuery("#cz_cuni_mff_ufal_dspace_app_xmlui_aspect_statistics_GAStatisticsTransformer_field_end_date")
            .datepicker({
                autoclose: true,
                format: 'yyyy-mm-dd',
                forceParse: false
            });

        jQuery("#cz_cuni_mff_ufal_dspace_app_xmlui_aspect_statistics_GAStatisticsTransformer_field_update_range")
            .on(ufal.click_event, function () {
                var sDate = jQuery("#cz_cuni_mff_ufal_dspace_app_xmlui_aspect_statistics_GAStatisticsTransformer_field_start_date").attr("value");
                var eDate = jQuery("#cz_cuni_mff_ufal_dspace_app_xmlui_aspect_statistics_GAStatisticsTransformer_field_end_date").attr("value");
                var url = window.location["href"].replace(window.location["search"], "");
                window.location = url + '?start=' + sDate + '&end=' + eDate;
            });

        if (jQuery("#aspect_submission_StepTransformer_field_license").length) {
            jQuery("#aspect_submission_StepTransformer_field_license").select2({
                placeholder: {id: "", text: jQuery("#aspect_submission_StepTransformer_field_license option:selected").text()},
                allowClear: true,
                formatResult: function (license) {
                    var id = license.id;
                    if (id == "") return "<div class='bold' style='padding: 5px;'>" + license.text + "</div>";
                    var a = $("#aspect_submission_StepTransformer_list_license-list li a[name='license_" + id + "']");
                    var label = a.attr("license-label");
                    var label_text = a.attr("license-label-text");
                    return "<div class='bold' style='padding: 5px;'><span class='label label-" + label + "'>" + label + "</span> " + license.text + "</div>";
                },
                formatSelection: function (license) {
                    var id = license.id;
                    if (id == "") return "<div class='bold' style='padding: 5px;'>" + license.text + "</div>";
                    var a = $("#aspect_submission_StepTransformer_list_license-list li a[name='license_" + id + "']");
                    var label = a.attr("license-label");
                    var label_text = a.attr("license-label-text");
                    return "<div class='bold' style='font-size: 120%; padding: 5px;'><span class='label label-" + label + "'>" + label + "</span> " + license.text + "</div>";
                }
            });
        }

        if (jQuery(".licenseselector").length) {

            jQuery("#aspect_submission_StepTransformer_field_license").change(function () {
                jQuery("#aspect_submission_StepTransformer_item_license-not-supported-message").addClass("hidden");
            });

            jQuery(".licenseselector").licenseSelector(
                {
                    licenses: {
                        'pcedt2': {
                            name: 'CC-BY-NC-SA + LDC99T42',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/license-pcedt2',
                            description: 'License Agreement for Prague Czech English Dependency Treebank 2.0',
                            categories: ['data', 'by', 'nc', 'sa'],
                        },
                        'cnc': {
                            name: 'Czech National Corpus (Shuffled Corpus Data)',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/license-cnc',
                            description: 'License Agreement for the CNC',
                            categories: ['data'],
                        },
                        'hamledt': {
                            name: 'HamleDT 1.0 Licence Agreement',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/licence-hamledt',
                            description: 'License Agreement for the HamleDT 1.0',
                            categories: ['data'],
                        },
                        'hamledt-2.0': {
                            name: 'HamleDT 2.0 Licence Agreement',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/licence-hamledt-2.0',
                            description: 'HamleDT 2.0 License Agreement',
                            categories: ['data'],
                        },
                        'pdt2': {
                            name: 'PDT 2.0 License',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/license-pdt2',
                            description: 'Prague Dependency Treebank, version 2.0 License Agreement',
                            categories: ['data'],
                        },
                        'pdtsl': {
                            name: 'PDTSL',
                            available: true,
                            url: 'https://lindat.mff.cuni.cz/repository/xmlui/page/licence-pdtsl',
                            description: 'Research-Usage License Agreement for the PDTSL',
                            categories: ['data'],
                        },
                        'apache-2': {
                            url: 'http://www.apache.org/licenses/LICENSE-2.0',
                        },
                        'perl-artistic-2': {
                            url: 'http://opensource.org/licenses/Artistic-2.0',
                        },
                        'test-1': {
                            url: 'http://www.google.com',
                        }
                    },
                    onLicenseSelected: function (license) {
                        var selectedLic = license["url"];
                        var allLic = jQuery("#aspect_submission_StepTransformer_list_license-list li a");
                        for (var i = 0; i < allLic.length; i++) {
                            if (allLic[i].href == selectedLic) {
                                var id = allLic[i].name.replace("license_", "");
                                $("#aspect_submission_StepTransformer_field_license").select2("val", id);
                                jQuery('html, body').animate({
                                    scrollTop: $("#aspect_submission_StepTransformer_list_submit-ufal-license").offset().top
                                }, 10);
                                jQuery("#aspect_submission_StepTransformer_item_license-not-supported-message").addClass("hidden");
                                return;
                            }
                        }
                        jQuery("#aspect_submission_StepTransformer_item_license-not-supported-message").removeClass("hidden");
                    }
                }
            );
        }


        if (jQuery("#aspect_administrative_ControlPanel_cell_DEL_COL")) {
            var delCol = jQuery("#aspect_administrative_ControlPanel_cell_DEL_COL");
            jQuery(delCol).append("<input type='checkbox' class='selectall'>");
            jQuery(".selectall").on(ufal.click_event, function () {
                var val = jQuery(this)[0].checked;
                jQuery(".todelete input[type='checkbox']").each(function () {
                    jQuery(this)[0].checked = val;
                });
            });
        }


		
		if(jQuery(".add-service-url")) {
			jQuery(".add-service-url").on(ufal.click_event, function() {
            	var service_div = jQuery(this).parents(".caption")[0];
                var count_input = jQuery("input[name$='_url_count']", service_div)[0];
                var count = parseInt(count_input.value);
                var newRow = jQuery(jQuery("tr", service_div)[count]).clone();
                var input1 = jQuery("input[name$='url_key_" + count + "']", newRow)[0];
                var input2 = jQuery("input[name$='url_value_" + count + "']", newRow)[0];
                input1.name = input1.name.replace(count, count+1);
                input2.name = input2.name.replace(count, count+1);
                input1.value = "";
                input2.value = "";
                newRow.insertAfter(jQuery(jQuery("tr", service_div)[count]));
                count_input.value = count+1;
                return false;
            });					
		}

        jQuery('a[data-href]').each(function(index, anchor){
            anchor = jQuery(anchor);
            anchor.attr('href', anchor.attr('data-href'))
        });

	});

//
//
//

ufal.utils = {

    handle_side_menu: function () {

        jQuery("#showhidemenu").on(ufal.click_event, function () {
            jQuery("#main-contents").toggleClass("hidden-xs");
            jQuery("#options-menu").toggleClass("hidden-xs");
            jQuery(".jumbotron").toggleClass("hidden-xs");
        });

        jQuery("#menu-toggler").on(ufal.click_event, function () {
            jQuery("#sidebar").toggleClass("display");
            jQuery(this).toggleClass("display");
            return false;
        });
        var b = jQuery("#sidebar").hasClass("menu-min");
        jQuery("#sidebar-collapse").on(
            ufal.click_event,
            function () {
                jQuery("#sidebar").toggleClass("menu-min");
                jQuery(this).find('[class*="icon-"]:eq(0)').toggleClass(
                    "icon-double-angle-right");
                b = jQuery("#sidebar").hasClass("menu-min");
                if (b) {
                    jQuery(".open > .submenu").removeClass("open");
                }
            });
        var a = "ontouchend" in document;
        jQuery(".nav-list")
            .on(
            ufal.click_event,
            function (g) {
                var f = jQuery(g.target).closest("a");
                if (!f || f.length === 0) {
                    return;
                }
                if (!f.hasClass("dropdown-toggle")) {
                    if (b
                        && ufal.click_event === "tap"
                        && f.get(0).parentNode.parentNode === this) {
                        var h = f.find(".menu-text").get(0);
                        if (g.target !== h
                            && !jQuery.contains(h, g.target)) {
                            return false;
                        }
                    }
                    return;
                }
                var d = f.next().get(0);
                if (!jQuery(d).is(":visible")) {
                    var c = jQuery(d.parentNode).closest("ul");
                    if (b && c.hasClass("nav-list")) {
                        return;
                    }
                    c
                        .find("> .open > .submenu")
                        .each(
                        function () {
                            if (this !== d
                                && !jQuery(
                                    this.parentNode)
                                    .hasClass(
                                    "active")) {
                                jQuery(this).slideUp(
                                    200).parent()
                                    .removeClass(
                                    "open");
                            }
                        });
                }
                if (b
                    && jQuery(d.parentNode.parentNode)
                        .hasClass("nav-list")) {
                    return false;
                }
                jQuery(d).slideToggle(200).parent().toggleClass(
                    "open");
                return false;
            });
    },

    initialize_layer_slider: function () {
        if (jQuery('#layerslider').length > 0) {
            jQuery(".carousel").carousel();
            jQuery(".home-search").focus();
        }
    },

    handle_broken_images: function () {
        jQuery("img[alt!='Icon']").error(function () {
            jQuery(this).css("display", "none");
        });
    },

    handle_static_pages_js: function () {
        jQuery(".helpdesk-tolink").each(function () {
            jQuery(this).attr("href", jQuery(".helpdesk").attr("href"));
        });
    },

    handle_modals: function () {

        if (jQuery('#userbox').length > 0) { // user logged in
            jQuery("#download-all-button").css("visibility", "visible");
            jQuery("#download-all-button").css("display", "block");
        }

    },

    basic_functions: function () {
        //
        jQuery(".hide-parent").each(function () {
            ufal.utils.hide_parent(jQuery(this));
        });
    },

    hide_parent: function (obj) {
        obj.parent().hide();
    },

    linkify: function (obj) {
        var text = jQuery(obj).html();
        var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
        var emailexp = /([a-z0-9_+.%-]+@[a-z0-9.-]+\.[a-z]{2,6})/gi;
        text = text.replace(exp, "<a target='_blank' href='$1'>$1</a>")
            .replace(emailexp, "<a href='mailto:$1'>$1</a>");
        jQuery(obj).html(text);
    },

    ajax_json: function (url) {
        var data = {};
        jQuery.ajax({
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function () {
            },
            data: {},
            async: false
        }).fail(function (jqXHR, textStatus) {
            console.log("lindat/utils failed to load data: " + textStatus);
        }).done(function (d) {
            data = d;
        });
        if (data == null) {
            console.log("lindat/utils failed to load data: did not get json");
        }
        return data;
    },

    swap_map: function (json) {
        var ret = {};
        for (var key in json) {
            ret[json[key]] = key;
        }
        return ret;
    },

    get_dspace_url: function () {
        var url = document.URL.substr(0, document.URL.search('/xmlui/?'))
            + '/xmlui/';
        return url;
    },

    convert_language_iso_codes: function () {
        var isoFieldsSelectors = '[name="dc_language_iso_selected"] + .ds-interpreted-field, '; //submission
        var numItems = jQuery(isoFieldsSelectors).length;
        if (numItems > 0) {
            var url = ufal.utils.get_dspace_url()
                + 'static/json/iso_langs.json';
            var isoCodesMap = ufal.utils.swap_map(ufal.utils.ajax_json(url));
            jQuery(isoFieldsSelectors).each(function (i) {
                var value = jQuery(this).html();
                var groups = value.match(/^(\s*)(\w{3})(.*)$/);
                if (groups) {
                    var isoCode = groups[2];
                    if (isoCode in isoCodesMap) {
                        value = groups[1] + isoCodesMap[isoCode] + groups[3];
                    }
                }
                jQuery(this).html(value);
            });
        }
    },

    convert_codes: function () {
        ufal.utils.convert_language_iso_codes();
    },

    getQueryParameter: function (str) {
        var queryParams = document.location.search.replace(/(^\?)/, '').split("&").map(function (n) {
            return n = n.split("="), this[n[0]] = n[1], this
        }.bind({}))[0];
        return queryParams[str];
    },

    isCookieExist: function (cname) {
    	var value = ufal.utils.getCookie(cname);
    	if (value != "") {
    		return true;
    	} else {
    		return false;
    	}
    },
    
    isCookieEqual: function (cname, cvalue) {
    	var value = ufal.utils.getCookie(cname);
    	if (value == cvalue) {
    		return true;
    	} else {
    		return false;
    	}
    },
    
    getCookie: function (cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";    	
    }
    
    
}

//
//
//

ufal.submissions = {

    handle_submission_js: function () {
        jQuery
            .each(
            jQuery("#aspect_submission_StepTransformer_list_submit-describe .thumbnail"),
            function () {
                jQuery(this)
                    .on(
                    "click",
                    function () {
                        jQuery(
                            "#aspect_submission_StepTransformer_list_submit-describe .thumbnail")
                            .attr("class",
                            "thumbnail col-sm-3");
                        jQuery(this)
                            .attr("class",
                            "thumbnail col-sm-3 alert-info");
                    });
            });

        var type = jQuery("#aspect_submission_StepTransformer_field_dc_type")
            .val();
        if (type != null || type !== "") {
            jQuery("#type_" + type).attr("class",
                "thumbnail col-sm-3 alert-info");
        }

        jQuery("#aspect_submission_StepTransformer_field_dc_date_issued")
            .datepicker({
                autoclose: true,
                format: 'yyyy-mm-dd',
                forceParse: false
            });

    },

    handle_files: function () {
        if (jQuery("#replaced_by_alert").length > 0) {
            jQuery("#files_section").hide();
            jQuery("#replaced_by_alert")
                .append(
                '<span class="font_smaller" style="display: inline-block; margin-top: 1em;" id="show_files_info">' + $.i18n._("Please refer to the submission above for the latest available data. If you nevertheless need the original data, please click ") + '<a href="#show-files" id="show_files_link">' + $.i18n._("here") + '</a>.</span>');
            jQuery("#show_files_link").on('click', function () {
                jQuery("#show_files_info").hide();
                jQuery("#files_section").show();
                jQuery('html, body').delay(100).animate({
                    scrollTop: jQuery("#files_section").offset().top
                }, 200);
            });
        }
    },


    autocomplete_solr: function (obj, url, updater_function) {
        ufal.submissions.configurable_autocomplete_solr(
            obj,
            url,
            updater_function,
            undefined,
            function (item, values) {
                var used_by = "";
                if (0 < values[item]) {
                    used_by = "<span class='font_smaller'>(" + $.i18n._("used by #%s", values[item]) + ")</span>";
                }
                return "<dl class='dl-horizontal'>" + "<dd style='margin-left: 10px;'>" + item +
                    " " + used_by + "</dd>" + "</dl>";
            }
        );
    },

    cached_ajax_json: [],

    configurable_autocomplete_solr: function (
        obj, url, updater_function, matcher_function, highlighter_function, source_function
    ) {
        var values = {};
        if (!(url in ufal.submissions.cached_ajax_json)) {
            ufal.submissions.cached_ajax_json[url] = ufal.utils.ajax_json(url);
        }
        var data = ufal.submissions.cached_ajax_json[url];
        if (data == null || !data.hasOwnProperty("facet_counts")) {
            // Try checking the rewrite rule (described in local conf)
            console.log(
                "lindat/autocomplete failed to load data: did not get any solr json");
            return;
        }
        for (var d in data.facet_counts.facet_fields) {
            // get the first property ...
            if (data.facet_counts.facet_fields.hasOwnProperty(d)) {
                data = data.facet_counts.facet_fields[d];
                break;
            }
        }
        if (data != null) {
            for (var i = 0; i < data.length; i += 2) {
                values[data[i]] = data[i + 1];
            }
        } else {
            console.log(
                "lindat/autocomplete failed to load data: did not get correct solr json");
        }

        obj.typeahead({
            source: function (query, process) {
                if (undefined == source_function) {
                    process(Object.keys(values));
                }else {
                    source_function(values, query, process);
                }
            },
            sorter: function (items) {
                // sort according usage count
                return items.sort(function (i1, i2) {
                    var cnt2 = (i2 in values) ? values[i2] : 0;
                    var cnt1 = (i1 in values) ? values[i1] : 0;
                    return cnt2 - cnt1;
                });
            },
            highlighter: function (item) {
                return highlighter_function(item, values);
            },
            matcher: matcher_function,
            updater: updater_function,
            items: 6
        });
    },

    handle_field_updater: function (item) {
        return 'http://hdl.handle.net/' + item;
    },

    autocomplete_solr_handle_field: function (obj, url) {
        ufal.submissions.autocomplete_solr(obj, url,
            ufal.submissions.handle_field_updater);
    },

    name_splitter: function (text) {
        var splits = [];
        if (text != null) {
            splits = text.split(/\s*,\s*/);
        }
        return splits;
    },

    sponsor_splitter: function (text) {
        var splits = [];
        if (text !== null) {
            splits = text.split(/@@/);
        }
        return splits;
    },

    name_field_updater: function (item) {
        return ufal.submissions.field_updater.call(this, ["_last", "_first"], ufal.submissions.name_splitter, item);
    },

    field_updater: function (selector_parts, splitter, item) {
        var id = this.$element.attr('id');
        var pattern = selector_parts.join('$|') + '$';
        var base_id = id.replace(new RegExp(pattern), "");
        var selectors = jQuery.map(selector_parts, function (element, index) {
            return "#" + base_id + element;
        });
        var splits = splitter(item);
        var return_value = null;
        if (splits.length > 0) {
            for (var i = 0; i < selectors.length; i++) {
                var selector = selectors[i];
                var value = "";
                if (i < splits.length) {
                    value = splits[i];
                }
                var element = jQuery(selector);
                if (element !== null) {
                    if (element.attr('id') === id) {
                        return_value = value;
                    }
                    element.val(value);
                }
            }
        }
        return return_value;
    },

    autocomplete_solr_name_field: function (obj, url) {
        ufal.submissions.autocomplete_solr(obj, url,
            ufal.submissions.name_field_updater);
    },

    autocomplete_solr_sponsor_component: function (obj, url) {
        ufal.submissions.configurable_autocomplete_solr(
            obj, url,
            // updater
            function (item) {
                return ufal.submissions.field_updater.call(
                    this,
                    ["_1_orgname", "_2_code", "_3_projname", "_4_type", "_5_openaire_id"],
                    ufal.submissions.sponsor_splitter,
                    item
                );
            },
            // matcher
            function (item) {
                var id = this.$element.attr('id');
                var splits = ufal.submissions.sponsor_splitter(item);
                var value = splits[1] + "\t" + splits[2];
                //default matcher but changed value
                return ~value.toLowerCase().indexOf(this.query.toLowerCase());
            },
            // highligher
            function (item, values) {
                var splits = ufal.submissions.sponsor_splitter(item);
                var funding_code = splits[1];
                var project_name = splits[2];
                var used_by = "";
                if (item in values && 0 < values[item]) {
                    used_by = "<br /><span class='font_smaller label label-primary'>" + $.i18n._("used by %s submission(s)", values[item]) + "</span>";
                }
                return "<dl class='dl-horizontal'>" +
                    "<dt style='width: 110px;'>" + $.i18n._("Funding code:") + "</dt>" +
                    "<dd style='padding-left: 0px;'>" +
                    funding_code +
                    "</dd>" +
                    "<dt style='width: 110px;'>" + $.i18n._("Project name:") + "</dt>" +
                    "<dd style='padding-left: 0px;'>" +
                    project_name +
                    used_by +
                    "</dd></dl>";
            },
            // source
            function (values, query, process) {
                // query backend for OpenAIRE if euFUNDS
                var attr = obj.attr("autocomplete-openaire");
                if (typeof attr !== typeof undefined && attr !== false) {
                    var choices_spec = obj.attr("autocomplete-openaire");
                    jQuery.ajax({
                        type: 'GET',
                        url: ufal.utils.get_dspace_url() + choices_spec + query,
                        dataType: 'xml',
                        success: function (data) {
                            var xml = jQuery(data);
                            var separator = "@@";
                            xml.find("Choice").each(function(){
                                // fake number of usages to -1
                                var project_name = jQuery(this).text();
                                project_name = project_name.substr(
                                    project_name.indexOf("-") + 2
                                );
                                var openaire_id = jQuery(this).attr("value");
                                // e.g., EC/FP7/..
                                var project_id = openaire_id.substr(openaire_id.split("/", 2).join("/").length + 1);
                                var fund_type = jQuery(".openaire-type-map").val();
                                var format = "European Union"
                                    + separator + project_id
                                    + separator + project_name
                                    + separator + fund_type
                                    + separator + openaire_id;
                                values[format] = -1;
                            });
                        },
                    }).fail(function (jqXHR, textStatus) {
                        console.log("lindat/utils failed to load openaire data...");
                    }).done(function () {
                        process(Object.keys(values));
                    });

                }else {
                    process(Object.keys(values));
                }
            }
        );
    },


    single_field_updater: function (item) {
        return item;
    },

    autocomplete_solr_single_field: function (obj, url) {
        ufal.submissions.autocomplete_solr(obj, url,
            ufal.submissions.single_field_updater);
    },

    autocomplete_lang_codes: function (jobj, url) {
        var lang_pairs_iso = ufal.utils.ajax_json(url);
        jQuery("#aspect_submission_StepTransformer_field_dc_language_iso")
            .typeahead(
            {
                source: Object.keys(lang_pairs_iso),
                highlighter: function (item) {
                    return "<dl class='dl-horizontal'>"
                        + "<dt style='width: 80px;'>" + $.i18n._("ISO:") + "</dt>"
                        + "<dd style='margin-left: 100px;'>"
                        + lang_pairs_iso[item]
                        + "</dd>"
                        + "<dt style='width: 80px;'>" + $.i18n._("Language:") + "</dt>"
                        + "<dd style='margin-left: 100px;'>"
                        + item + "</dd>" + "</dl>";
                },
                updater: function (item, scope) {
                    return lang_pairs_iso[item];
                },
                items: 8
            }).blur(function () {
                var lang = jobj.val();
                for (var p in lang_pairs_iso) {
                    if (lang_pairs_iso[p] === lang) {
                        return;
                    }
                }
                var warning_cls = "alert alert-warning";
                // iso 693-3 must have 3 letters (even N/A)!
                if (3 != lang.length) {
                    jobj.parent().find(".text-info").addClass(warning_cls);
                    jobj.addClass(warning_cls);
                } else {
                    jobj.parent().find(".text-info").removeClass(warning_cls);
                    jobj.removeClass(warning_cls);
                }
            });
    },

    autocomplete_select_to_autocomplete: function (jobj) {

        var options = [];
        var id = jobj.attr('id');

        jobj.find("option").each(function () {
            options[jQuery(this).text()] = jQuery(this).val();
        });

        jobj.replaceWith('<input id="' + id + '-text" type="text" class="'
            + jobj.attr('class') + '" name="' + jobj.attr('name')
            + '-text" /> \
        				  <input id="' + id
            + '" type="hidden" class="' + jobj.attr('class') + '" name="'
            + jobj.attr('name') + '" />');

        var jobj = jQuery('#' + id + '-text');

        jobj.typeahead(
            {
                source: Object.keys(options),
                highlighter: function (item) {
                    return "<dl class='dl-horizontal'>"
                        + "<dd style='margin-left: 10px;'>" + item
                        + "</dd>" + "</dl>";
                },
                updater: function (item, scope) {
                    jQuery('#' + id).val(options[item]);
                    return item;
                },
                items: 8
            }).blur(function () {
                var value = jobj.val();
                for (var p in options) {
                    if (p === value) {
                        return;
                    }
                }
                jobj.val('');
            });
    },

    autocomplete_select2: function (jobj) {
        jobj.select2({
            placeholder: 'Please select value',
            allowClear: true
        });
    },

    autocomplete: function () {
        jQuery(".autocomplete")
            .each(
            function () {
                // two hidden inputs specify the url and the type
                var type = jQuery(
                    "[name='" + jQuery(this).attr('name') + "-type']").val();
                var type_splits = type.split("-");
                var basetype = type_splits[0];

                if (basetype === "select_to_autocomplete") {
                    ufal.submissions
                        .autocomplete_select_to_autocomplete(jQuery(this));
                } else if (basetype === "select2") {
                    ufal.submissions
                        .autocomplete_select2(jQuery(this));
                } else if (basetype === "solr"
                    || basetype === "json_static") {

                    var subtype = "";
                    if (type_splits.length >= 2) {
                        subtype = type_splits[1];
                    }

                    var url = jQuery(
                            "[name='" + jQuery(this).attr('name') + "-url']").val()
                        + subtype;

                    if (basetype == "json_static") {
                        switch (subtype) {
                            case "iso_langs.json":
                                ufal.submissions.autocomplete_lang_codes(
                                    jQuery(this), url);
                                break;
                            default:
                                console.log("lindat/autocomplete does not support this type: " + type);
                                return;
                        }
                    } else if (basetype == "solr") {
                        switch (subtype) {
                            case "handle":
                                ufal.submissions.autocomplete_solr_handle_field(
                                    jQuery(this), url);
                                break;
                            case "author_ac":
                                ufal.submissions.autocomplete_solr_name_field(
                                    jQuery(this), url);
                                break;
                            case "local.sponsor_ac":
                                ufal.submissions.autocomplete_solr_sponsor_component(
                                    jQuery(this), url);
                                break;
                            default:
                                ufal.submissions.autocomplete_solr_single_field(
                                    jQuery(this), url);
                        }
                    }
                } else {
                    console.log("lindat/autocomplete does not support this type: " + type);
                    return;
                }

                jQuery(this).attr('autocomplete', 'off');
            });
    }
};

ufal.search = {
    handle_filters: function () {
        jQuery(".selected-filter-close-icon")
            .click(
            function () {
                var filter_number = parseInt(jQuery(this).attr("filter_number")) + 1;
                jQuery("input[name='filter_" + filter_number + "'][type='text']")[0].value = "";
                jQuery("#aspect_discovery_SimpleSearch_field_submit_apply_filter").click();
            });

        jQuery(".selected-filter-clearall")
            .click(
            function () {
                jQuery("input[name^='filter_'][type='text']").each(function () {
                    this.value = "";
                });
                jQuery("#aspect_discovery_SimpleSearch_field_submit_apply_filter").click();
            });


        jQuery("select[name^='filter_relational_operator']").change(
            function () {
                var val = jQuery(this).val();
                var tb = jQuery("[name^='filter_'][type='text']", jQuery(this).parent().parent());
                if (val == "notavailable") {
                    tb.css("visibility", "hidden");
                    tb[0].value = "[* TO *]";
                } else {
                    tb[0].value = "";
                    tb.css("visibility", "visible");
                }
            });
    }
};

ufal.browse = {
    handle_date_input: function () {
        jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_month")
            .change(
            function () {
                jQuery(
                    "#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
                    .val("");
            });
        jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_year")
            .change(
            function () {
                jQuery(
                    "#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
                    .val("");
            });
        jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
            .on(
            'input',
            function () {
                if (jQuery(this).val() != "") {
                    jQuery(
                        "#aspect_artifactbrowser_ConfigurableBrowse_field_month")
                        .val("-1");
                    jQuery(
                        "#aspect_artifactbrowser_ConfigurableBrowse_field_year")
                        .val("-1");
                }
            });

    }
}

window.LindatRefBoxConfig ={
    rest: ufal.utils.get_dspace_url().replace(/xmlui\/?/, 'rest'),
};

